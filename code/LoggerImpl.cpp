//
// Created by marsofandrew on 14.11.18.
//

#include "LoggerImpl.hpp"
#include <iostream>
#include <string>

LoggerImpl::LoggerImpl(std::basic_ostream<char> *stream) :
  stream_(stream) {}

void LoggerImpl::sendCratedOrder(const std::shared_ptr<Order> &order)
{
  sendMessage(INFO, "Order :" + std::to_string(order->getId()) + " is generated by generator:" +
                    std::to_string(order->getGenerator()->getId()));
}

void LoggerImpl::sendMessage(const Logger::Type &type, const std::string &message)
{
  if (timer_ == nullptr) {
    (*stream_) << "[" << type << "]: " << message << "\n";
  } else {
    (*stream_) << "Time: " << timer_->getCurrentTime() << " [" << type << "]: " << message << "\n";
  }
}

void LoggerImpl::sendRefusedOrder(const std::shared_ptr<Order> &order)
{
  sendMessage(INFO, "Order :" + std::to_string(order->getId()) + " is Refused");
}

void LoggerImpl::sendProcessedOrder(const std::shared_ptr<Order> &order)
{
  sendMessage(INFO, "Order :" + std::to_string(order->getId()) + " is Processed");
}

void LoggerImpl::setTimer(const std::shared_ptr<Timer> &timer)
{
  timer_ = timer;
}

void LoggerImpl::sendBufferedOrder(const std::shared_ptr<Order> &order)
{
  sendMessage(INFO, "Order: " + std::to_string(order->getId()) + " is buffered");
}

void LoggerImpl::sendGetOrderFromBuffer(const std::shared_ptr<Order> &order)
{
  sendMessage(INFO, "Order: " + std::to_string(order->getId()) + " has taken from buffer");
}

void LoggerImpl::sendAddingOrderToBuffer(const std::shared_ptr<Order> &order)
{
  sendMessage(INFO, "Order: " + std::to_string(order->getId()) + " is adding to buffer");
}

void LoggerImpl::sendOrderToProcessor(const std::shared_ptr<Order> &order,
                                      const std::shared_ptr<Processor> &processor)
{
  sendMessage(INFO, "Order: " + std::to_string(order->getId()) + " is set to processor: " +
                    std::to_string(processor->getId()));
}






